1).Explain the concept of method overloading in java.Provide example using static method

->
Method overloading is two or more method having same name but difference in parameters within same class.

Ex.
class Addition{

public static int add(int a,int b)
{
  int sum;
  sum=a+b;
  return sum;
}

public static int add(int a,int b,int c)
{
  int sum;
  sum=a+b+c;
  return sum;
}

public static int add(int a)
{
  int b=2;
  int sum;
  sum=a+b;
  return sum;
}
}
public class AdditionRunner{
	public static void main(String[] args)
		{
			int a=2,b=4;
			int res1,res2,res3;
			System.out.println("invoking main in AdditionRunner");
                        res1=Addition.add(10,20);
			System.out.println("Addition of two numbers a and b is "+res1);
			res2=Addition(10,20,30);
			System.out.println("Addition of three numbers a,b and c is "+res2);
			res3=Addition(12);
                        System.out.println("Addition of two numbers when we pass arguement a value 12 is "+12);
		}
}

2.What are the different kinds of variables defined in java programming language? with examples.
->
   Variables are the containers taht is used to store the information or data.
   The syntax of the variable is given by : datatype variableName;
   Variables can be categorised into 4 different types:
   1.Instance variable
   2.Static variable
   3.Local variable
   4.parameter variable

  1.Instance variable: these are the types of the variable where we declarethe varibales inside the class outside the method and which is in        globalscope .This variable can also be called as non-Static variables.

 2.Static variables: These are the type of variable where it creates only one copy for all the instances that we create for the class.To access this variable we can access in two different ways i.e by using reference(object) and classname.

 3.Local variable: loacl variables are the type of variable where it is declared within a scope or within the methods.we cannot access these variables outside the scope or methods.

 4.Parameter variables : these are the type of varibales that is declared within the paranthesis of the methods.Where these variables can be initialized by passing values as arguement while calling the method.


Ex.class Person{
	String name;//instnace variable
        static long phno;//static variable
	
        Person(String PersonName)//Here person name becomes parameter variable
	{
		this.name=personName;
	}
	
	static{
            this.phno=9620689808l;
		}
	
	static void details()
	{
		int age;//local variable
		age=28;
		System.out.println("The name of the person is "+this.name);
		System.out.println("The phone number of person is :"+phono);
		System.out.println("The age of the person is "+age);
	}
}
class PersonRunner{
	Public static void main(String[] args)
	{
		Person p1=new Person("raju");
                Person.phno=9964406090;
		p1.details();
	}
}


-------------------------------------------------------------------------------------------------------
3)What are the differences between Heap and Stackmemory in java
->Heap is a memory which is created whenever jvm runs the program whereas stack is a memory which is created whenever a heap is created.
->Heap memory contains various sections like Stack,Meta Space,Constant pool,Intance memory whereas Stack memory consist only stack frames that too created whenever a method is called and gets deleted after the execution of the program/method.
->heap memory holds details of all the program code which we have writtern whereas stack only holds the details of methods and deletes whenever it completes the execution.

->stack memory follows first in last out principle whereas heap memory doesnot follow any princiles like this.

--------------------------------------------------------------------------------------------------------------------------------------------

4)Write a program to constructor overloading.
->

 class Food{
   String name;
   String location;
   boolean breakfast;
   double price;
   int time;
   
  Food()
  {
   System.out.println("Invoking food() no-arg constructor in Food);
   }

  Food(String name)
  {
   System.out.println("Invoking string constructor in Food);
   this.name=name;
   }

  Food(String name,String location,boolean breakfast,double price,int time)
  {
    System.out.println("Invoking string,string,boolean,double,int constructor in Food);
	this.name=name;
	this.location=location;
	this.breakfast=breakfast;
	this.price=price;
	this.time=time;
   }

   public void display()
   {
	System.out.println("Name of the food is "+thsi.name);
	System.out.println("Location of the food available is "+this.location);
	System.out.println("Whether breakfast is avialable or not?? "+this.breakfast);
	System.out.println("Price for the food is "+this.price);
	System.out.println("Time at which it starts is "+this.time);
    }
class FoodRunner{
	public static void main(String[] args){
	{
		System.out.println("Invoking main in FoodRunner");
		Food f1=new Food("Idli");
		f1.display();

                Food f2=new Food();
  		f2.display();

		Food f3=new Food("Dosa","Rajajinagar",true,35.0,10);
 		f3.display();
	}
}

---------------------------------------------------------------------------------------------------------------------------------

6.Write a program to static varibale and static method.

->class Mobile{
	String brand;
        static int noOfcamera;
 	double price;

	Mobile()
	{
		System.out.println("invoking default constructor in Mobile");
	}
	static{
		noOfCamera=2;
	}

        static void details(String brand,double price)
	{
		System.out.println("invoking details in Mobile");
                System.out.println("the brand of the mobile is "+this.name);
		System.out.println("The price of the mobile is "+this.price);
	}
}

public class MobileRunner{
	public static void main(String[] args)
	{
		System.out.println("Invoking the main in MobileRunner");
		Mobile m1=new Mobile();
 		Mobile.details("Vivo",19000.0);
		System.out.println("The number of cameras is "+Mobile.noOfCameras);
	}
}

--------------------------------------------------------------------------------------------------------------------------------------------
7.Write a program to constructor chaining using this keyword.
->class Rectangle
{
	double area;
	double length;
	double breadth;
	Rectangle()
	{
		System.out.println("Invoking no-default constructor in Rectangle");
	}

	Rectangle(double length)
	{
		this();
		System.out.println("invoking double constructor in Rectangle");
		this.length=length;
	}

	Rectangle(double length,double breadth)
	{
		this(length);
		System.out.println("invoking double,double constructor in Rectangle");
		this.breadth=breadth;
	}
	public void details()
	{
		System.out.println("Invoking details in Rectangle");
		System.out.println("Length of the rectangle is "+this.length);
		System.out.println("Breadth of the rectangle is "+this.breadth);
		System.out.println("Area of the rectangle is "+(this.length*this.breadth));

}
class RectangleRunner{
	public static void main(String[] args)
	{
		System.out.println("Invoking main in RectangleRUnner");
		Rectangle r1=new Rectangle();
                r1.details();
		Rectangle r2=new Rectangle(12);
  		r2.details();
		Rectangle r3=new rectangle(13,14);
                r3.details()
	}
}
           


 





